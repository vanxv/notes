1 Object documentation is what you get when you call ? XXX or help().

2 It works like a dictionary, opposite to vignette.

3 They reside in the ".Rd" file in the "man/" folder.

4 While you can write the ".Rd" file yourself, roxygen2 makes it easier by formatting comment into ".Rd" files.

5 Two workflow to write documentation
In the first workflow, you can use devtools::document() (which calls roxygen2 to do the hard work) to generate ".Rd" files. Now, you can preview the documentation with ? or help.
In the second workflow, build&reload the package, and then preview the documentation. This needs some configuration.
The difference is that the second will show the links between packages.

6 Roxygen comments: TEXT part
Each block includes some TEXT before the first tag.1 This is called the introduction, and is parsed specially:
The first sentence becomes the title of the documentation. That’s what you see when you look at help(package = mypackage) and is shown at the top of each help file. It should fit on one line, be written in sentence case, but not end in a full stop.
The second paragraph is the description: this comes first in the documentation and should briefly describe what the function does.
The third and subsequent paragraphs go into the details: this is a (often long) section that is shown after the argument description and should go into detail about how the function works.

7 Roxygen comments: @section
You can add arbitrary sections to the documentation with the @section tag. This is a useful way of breaking a long details section into multiple chunks with useful headings. Section titles should be in sentence case, must be followed by a colon, and they can only be one line long.
#' @section Warning:
#' Do not operate heavy machinery within 8 hours of using this function.

8 Roxygen comments: @seealso and @family
#' @family aggregate functions
#' @seealso \code{\link{prod}} for products, \code{\link{cumsum}} for cumulative
#'   sums, and \code{\link{colSums}}/\code{\link{rowSums}} marginal sums over
#'   high-dimensional arrays.

9 Roxygen comments: @aliases and @ keywords
@aliases alias1 alias2 ... adds additional aliases to the topic. An alias is another name for the topic that can be used with ?.
@keywords keyword1 keyword2 ... adds standardised keywords. Keywords are optional, but if present, must be taken from a predefined list found in file.path(R.home("doc"), "KEYWORDS").
Generally, keywords are not that useful except for @keywords internal. Using the internal keyword removes the function from the package index and disables some of its automated tests. It’s common to use @keywords internal for functions that are of interest to other developers extending your package, but not most users.

10 Documenting functions
@param name description
You can document multiple arguments in one place by separating the names with commas (no spaces). For example, to document both x and y, you can write @param x,y Numeric vectors..
@examples Example code must work without errors as it is run automatically as part of R CMD check. \dontrun{} allows you to include code in the example that is not run.
@example path/relative/to/package/root to insert them into the documentation. (Note that the @example tag here has no ‘s’.)
@return description

11 Documenting datasets
See the data chapter.

12 Documenting package
There’s no object that corresponds to a package, so you need to document NULL, and then manually label it with @docType package and @name <package-name>. This is also an excellent place to use the @section tag to divide up page into useful categories.
#' foo: A package for computating the notorious bar statistic.
#'
#' The foo package provides three categories of important functions:
#' foo, bar and baz.
#' 
#' @section Foo functions:
#' The foo functions ...
#'
#' @docType package
#' @name foo
NULL
I usually put this documentation in a file called <package-name>.R. It’s also a good place to put the package level import statements that you’ll learn about in imports.

12 Documenting S3
S3 generics are regular functions, so document them as such. S3 classes have no formal definition, so document the constructor function. It is your choice whether or not to document S3 methods.
@method generic class tags for all S3 methods: From version 3.0.0 onward, this is no longer needed as roxygen2 will figure it out automatically. Automatic method detection will only fail if the generic and class are ambiguous. For example is all.equal.data.frame() the equal.data.frame method for all, or the data.frame method for all.equal?. If this happens, you can disambiguate with e.g. @method all.equal data.frame.

13 Documenting S4
Please study the S4 part in "Advanced R" before getting into this part.

14 Documenting RC
#' A Reference Class to represent a bank account.
#'
#' @field balance A length-one numeric vector.
Account <- setRefClass("Account",
  fields = list(balance = "numeric"),
  methods = list(
    withdraw = function(x) {
      "Withdraw money from account. Allows overdrafts"
      balance <<- balance - x
    }
  )
)
docstring: Methods with doc strings will be included in the “Methods” section of the class documentation. Each documented method will be listed with an automatically generated usage statement and its doc string.

15 Special character
@ -> @@
% -> \%
\ -> \\

16 @inheritParams
#' @param a This is the first argument
foo <- function(a) a + 10
#' @param b This is the second argument
#' @inheritParams foo
bar <- function(a, b) {
  foo(a) * 10
}

17 @describeIn
@describeIn is designed for the most common cases:
Documenting methods in a generic.
Documenting methods in a class.
Documenting functions with the same (or similar) arguments.

18 @rdname
There are two ways to use @rdname. You can add documentation to an existing function:
#' Basic arithmetic
#'
#' @param x,y numeric vectors.
add <- function(x, y) x + y

#' @rdname add
times <- function(x, y) x * y

Or, you can create a dummy documentation file by documenting NULL and setting an informative @name.

#' Basic arithmetic
#'
#' @param x,y numeric vectors.
#' @name arith
NULL

#' @rdname arith
add <- function(x, y) x + y

#' @rdname arith
times <- function(x, y) x * y

19 Formatting: Within roxygen tags, you use .Rd syntax to format text.

