OO in R

1. Thouhg "Everything that exists in R is an object" as captured by John Chambers, not everything is "Object-Oriented". 

2. Use "is.object" to test if an object is a base object or OO object. The primary attribute that distinguish between base and OO object is the "class", use "attribute(XXX, "class")". "class" function is not reliable for this because it falls back to getting base type rather than class.

3. While only OO objects have a class attribute, every object has a base type.

4. Base type are relative stable in R because only R-core can create new type. There are 25 different types, loosely grouped into the following groups:
4.1 the vectors: NULL, logical, integer, double, complex, character, list, raw.
4.2 Functions: closure (regular R functions), special (internal functions), builtin (primitive functions) and environment.
4.3 Language components: symbol (aka names), language (usually called calls), pairlist (used for function arguments). “Expression” is a special purpose type that’s only returned by parse() and expression(). They are not needed in user code.
4.4 There are a few esoteric types that are important for C code but not generally available at the R level: externalptr, weakref, bytecode, S4, promise, “…”, and any.

5  S3 should be your default choice for OO programming: you should use it unless you have a compelling reason otherwise.

6 S3 is very flexible, and even frightening. 

7 S3 methods are functions with a special naming scheme, generic.class().

8 You can find some S3 methods by typing their names. However, this will not work with most packages because S3 methods are not exported: they live only inside the package, and are not available from the global environment. Instead, you can use getS3method(), which will work regardless of where the method lives:

9 A digression: POSIXct, POSIXlt and POSIXt
firstly, ct means calendar time, and lt means local time. However, t just means time probably. But, whatever, POSIXt is just a virtual class inherited by POSIXct and POSIXlt, which facilitate some mixed operation between ct and lt.

So the internal structure difference between POSIXct and POSIXlt is that POSIXct actually contains the (signed) number of seconds since the beginning of 1970 (in the UTC time zone), while POSIXlt is list of vectors with each element representing different component of time, like year, month, day, hour, min, second, and, of course time zone. POSIXct complies the POSIX/C99 construct of "calendar time".

10 Object Style
S3 gives you the freedom to build a new class on top of any existing base type. So far, we’ve focussed on vector-style where you take an existing vector type and add some attributes. Importantly, a single vector-style object represents multiple values. There are two other important styles: scalar-style (namely list-style) and data-frame-style.

11 s3 classes rely on generics to dispatch a call to the right methods using "UseMethod", which actually dispatch the call according to the naming convention, "generic.class". Thus, one'd better not name a non-method function by including ".".

12 Remember that apart from methods that you’ve created, and those defined in the base package, most S3 methods will not be directly accessible. You’ll need to use getS3method("generic", "class") to see their source code.

13 Methods should always have the same arguments as their generics. This is not usually enforced, but it is good practice because it will avoid confusing behaviour. If you do eventually turn your code into a package, R CMD check will enforce it, so it’s good to get into the habit now. There is one exception to this rule: if the generic has ..., the method must still have all the same arguments (including ...), but can also have its own additional arguments.

14 If you think your coercion function will be frequently used, it’s worth providing a default method that gives a better error message. Default methods are called when no other method is appropriate.

15 Three principles to adhere to when creating a subclass: (a) A subclass should be built on the same base type as a parent. (b) The class attribute of the subclass should be of the form of c(subclass, parent_class). (c) The fields of subclass shoulde include the fields of the parent. And these properties should be enforced by the constructor.
